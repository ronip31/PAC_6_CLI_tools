import typer
from analyzer.analyze_lines import analyze_lines, count_lines
from analyzer.analyze_comments import analyze_comments, count_comments
from analyzer.analyze_docstrings import analyze_docstrings, count_docstrings
from analyzer.analyze_classes import analyze_classes, count_classes
from analyzer.analyze_functions import analyze_functions, count_functions
from analyzer.analyze_indentation import analyze_indentation, count_indentation



from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.markdown import Markdown

app = typer.Typer(
    help="Ferramenta CLI para an√°lise de c√≥digo Python.",
    add_completion=False,
    invoke_without_command=True
)

console = Console()

# Callback para --version ou exibi√ß√£o personalizada de ajuda
@app.callback()
def main(
    ctx: typer.Context,
    version: bool = typer.Option(False, "--version", "-v", help="Mostra a vers√£o e sai."),
    help_: bool = typer.Option(False, "--help", is_eager=True, help="Mostra esta mensagem e sai.")
):
    if version:
        typer.secho("üì¶ Analyzer CLI - Vers√£o 1.0.0", fg=typer.colors.GREEN, bold=True)
        raise typer.Exit()

    if help_:
        console = Console()
        help_text = """
# üß† Analyzer CLI

Ferramenta CLI para an√°lise de c√≥digo Python.

## üì¶ Comandos principais
- `all`               ‚Üí Analisa todas as m√©tricas de uma vez
- `lines`             ‚Üí Conta o total de linhas de c√≥digo
- `comments`          ‚Üí Conta o total de coment√°rios
- `docstrings`        ‚Üí Conta as docstrings
- `classes`           ‚Üí Conta as classes
- `functions`         ‚Üí Conta as fun√ß√µes
- `indent`            ‚Üí Analisa os n√≠veis de indenta√ß√£o

## üß™ Comandos auxiliares (via terminal)
- `runtests`              ‚Üí Roda todos os testes
- `runtests-verbose`      ‚Üí Roda testes com sa√≠da detalhada
- `runtests-failures`     ‚Üí Roda somente os testes que falharam anteriormente

## üí° Exemplo
```bash
analyzer all examples/sample.py
    """
        console.print(Markdown(help_text))
        raise typer.Exit()

    if ctx.invoked_subcommand is None:
        typer.secho("‚ö†Ô∏è Nenhum comando fornecido. Use '--help' para ver os comandos dispon√≠veis.", fg=typer.colors.YELLOW)
        raise typer.Exit(code=1)




# Comando para an√°lise completa
@app.command("all", help="Analisa todas as m√©tricas do c√≥digo (linhas, coment√°rios, docstrings, classes e fun√ß√µes).")
def analyze_all(file: str = typer.Argument(..., help="Caminho para o arquivo Python a ser analisado.")):
    """Analisa todas as m√©tricas do c√≥digo em um √∫nico comando."""
    try:
        with open(file, "r", encoding="utf-8") as f:
            code = f.read()
    except FileNotFoundError:
        typer.secho(f"Arquivo n√£o encontrado: {file}", fg=typer.colors.RED, err=True)
        raise typer.Exit(code=1)

    # Contagens
    line_count = count_lines(code)
    comment_count = count_comments(code)
    docstring_count = count_docstrings(code)
    class_count = count_classes(code)
    function_count = count_functions(code)
    indent_result = count_indentation(file)

    # Exibi√ß√£o formatada
    table = Table(title=f"üìä An√°lise do Arquivo: {file}", title_style="bold cyan")
    table.add_column("M√©trica", style="bold yellow")
    table.add_column("Quantidade", justify="right", style="bold green")

    table.add_row("Total de linhas", str(line_count))
    table.add_row("Coment√°rios", str(comment_count))
    table.add_row("Docstrings", str(docstring_count))
    table.add_row("Classes", str(class_count))
    table.add_row("Fun√ß√µes", str(function_count))
    table.add_row("Indenta√ß√£o M√©dia", str(indent_result["average_indent"]))
    table.add_row("Indenta√ß√£o M√°xima", str(indent_result["max_indent"]))
    table.add_row("Indenta√ß√£o M√≠nima", str(indent_result["min_indent"]))

    console.print(table)

# Comandos individuais
@app.command("lines", help="Conta o n√∫mero total de linhas no c√≥digo.")
def lines(file: str = typer.Argument(..., help="Caminho para o arquivo Python.")):
    analyze_lines(file)

@app.command("comments", help="Conta o n√∫mero de coment√°rios no c√≥digo.")
def comments(file: str = typer.Argument(..., help="Caminho para o arquivo Python.")):
    analyze_comments(file)

@app.command("docstrings", help="Conta a quantidade de docstrings no c√≥digo.")
def docstrings(file: str = typer.Argument(..., help="Caminho para o arquivo Python.")):
    analyze_docstrings(file)

@app.command("classes", help="Conta o n√∫mero de classes no c√≥digo.")
def classes(file: str = typer.Argument(..., help="Caminho para o arquivo Python.")):
    analyze_classes(file)
@app.command("functions", help="Conta o n√∫mero de fun√ß√µes no c√≥digo.")
def functions(file: str = typer.Argument(..., help="Caminho para o arquivo Python.")):
    analyze_functions(file)


@app.command("indent", help="Analisa os n√≠veis de indenta√ß√£o do c√≥digo.")
def indent(file: str = typer.Argument(..., help="Caminho para o arquivo Python.")):
    analyze_indentation(file)

    
# Entrada CLI
def cli_main():
    app()

if __name__ == "__main__":
    app()
